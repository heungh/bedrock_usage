#!/usr/bin/env python3
"""ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± - IAM Role Í∏∞Î∞ò Bedrock API Ìò∏Ï∂ú (Îã§Ï§ë Î¶¨Ï†Ñ ÏßÄÏõê)"""

import boto3
import json
import time
import random
from datetime import datetime

# Í≥ÑÏ†ï ID ÎèôÏ†Å Í∞ÄÏ†∏Ïò§Í∏∞
ACCOUNT_ID = boto3.client("sts").get_caller_identity()["Account"]

# ÌÖåÏä§Ìä∏ ÏãúÎÇòÎ¶¨Ïò§ Ï†ïÏùò (Îã§Ï§ë Î¶¨Ï†Ñ, Îã§Ï§ë Î™®Îç∏)
TEST_SCENARIOS = [
    # ===== US East Î¶¨Ï†Ñ (11Í∞ú Î™®Îç∏ ÏßÄÏõê) =====
    {
        "type": "role",
        "name": "CustomerServiceApp-BedrockRole",
        "role_arn": f"arn:aws:iam::{ACCOUNT_ID}:role/CustomerServiceApp-BedrockRole",
        "region": "us-east-1",
        "model": "us.anthropic.claude-3-haiku-20240307-v1:0",
        "calls": random.randint(1, 5),
        "prompt": "Í≥†Í∞ù Î¨∏Ïùò: Î∞∞ÏÜ°Ïù¥ ÏßÄÏó∞ÎêòÍ≥† ÏûàÏäµÎãàÎã§.",
    },
    {
        "type": "role",
        "name": "DataAnalysisApp-BedrockRole",
        "role_arn": f"arn:aws:iam::{ACCOUNT_ID}:role/DataAnalysisApp-BedrockRole",
        "region": "us-east-1",
        "model": "us.anthropic.claude-sonnet-4-5-20250929-v1:0",  # Claude 4.5
        "calls": random.randint(1, 5),
        "prompt": "Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù: [1,2,3,4,5]",
    },
    {
        "type": "role",
        "name": "CustomerServiceApp-BedrockRole",
        "role_arn": f"arn:aws:iam::{ACCOUNT_ID}:role/CustomerServiceApp-BedrockRole",
        "region": "us-east-1",
        "model": "us.anthropic.claude-3-7-sonnet-20250219-v1:0",  # Claude 3.7
        "calls": random.randint(1, 5),
        "prompt": "Ï†úÌíà ÏÑ§Î™ÖÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.",
    },
    {
        "type": "role",
        "name": "DataAnalysisApp-BedrockRole",
        "role_arn": f"arn:aws:iam::{ACCOUNT_ID}:role/DataAnalysisApp-BedrockRole",
        "region": "us-east-1",
        "model": "us.anthropic.claude-opus-4-20250514-v1:0",  # Claude Opus 4
        "calls": random.randint(1, 5),
        "prompt": "Î≥µÏû°Ìïú ÎπÑÏ¶àÎãàÏä§ Ï†ÑÎûµÏùÑ ÏàòÎ¶ΩÌï¥Ï£ºÏÑ∏Ïöî.",
    },
    # ===== US West Î¶¨Ï†Ñ (17Í∞ú Î™®Îç∏ ÏßÄÏõê) =====
    {
        "type": "role",
        "name": "DocumentProcessorApp-BedrockRole",
        "role_arn": f"arn:aws:iam::{ACCOUNT_ID}:role/DocumentProcessorApp-BedrockRole",
        "region": "us-west-2",
        "model": "us.anthropic.claude-sonnet-4-5-20250929-v1:0",  # Claude 4.5
        "calls": random.randint(1, 5),
        "prompt": "Î¨∏ÏÑú ÏöîÏïΩ: AWS ÌÅ¥ÎùºÏö∞Îìú ÏÑúÎπÑÏä§",
    },
    {
        "type": "role",
        "name": "DocumentProcessorApp-BedrockRole",
        "role_arn": f"arn:aws:iam::{ACCOUNT_ID}:role/DocumentProcessorApp-BedrockRole",
        "region": "us-west-2",
        "model": "us.anthropic.claude-3-5-haiku-20241022-v1:0",  # Claude 3.5 Haiku
        "calls": random.randint(1, 5),
        "prompt": "ÏßßÏùÄ Î¨∏ÏÑú Ï≤òÎ¶¨",
    },
    # ===== Tokyo Î¶¨Ï†Ñ (Cross-Region Inference Ìè¨Ìï®) =====
    {
        "type": "role",
        "name": "ChatbotApp-BedrockRole",
        "role_arn": f"arn:aws:iam::{ACCOUNT_ID}:role/ChatbotApp-BedrockRole",
        "region": "ap-northeast-1",
        "model": "anthropic.claude-3-haiku-20240307-v1:0",  # Claude 3 Haiku (Direct)
        "calls": random.randint(1, 5),
        "prompt": "„Åì„Çì„Å´„Å°„ÅØÔºÅ‰ªäÊó•„ÅÆÂ§©Ê∞ó„ÅØÔºü",
    },
    {
        "type": "role",
        "name": "ChatbotApp-BedrockRole",
        "role_arn": f"arn:aws:iam::{ACCOUNT_ID}:role/ChatbotApp-BedrockRole",
        "region": "ap-northeast-1",
        "model": "anthropic.claude-3-5-sonnet-20240620-v1:0",  # Claude 3.5 v1 (Direct)
        "calls": random.randint(1, 5),
        "prompt": "Êù±‰∫¨„ÅÆË¶≥ÂÖâ„Çπ„Éù„ÉÉ„Éà„ÇíÊïô„Åà„Å¶",
    },
    # ===== Seoul Î¶¨Ï†Ñ (Cross-Region Inference Ìè¨Ìï®) =====
    {
        "type": "role",
        "name": "KoreaServiceApp-BedrockRole",
        "role_arn": f"arn:aws:iam::{ACCOUNT_ID}:role/KoreaServiceApp-BedrockRole",
        "region": "ap-northeast-2",
        "model": "anthropic.claude-3-haiku-20240307-v1:0",  # Claude 3 Haiku (Direct)
        "calls": random.randint(1, 5),
        "prompt": "ÏÑúÏö∏ ÎÇ†Ïî® Ï†ïÎ≥¥",
    },
    {
        "type": "role",
        "name": "KoreaServiceApp-BedrockRole",
        "role_arn": f"arn:aws:iam::{ACCOUNT_ID}:role/KoreaServiceApp-BedrockRole",
        "region": "ap-northeast-2",
        "model": "anthropic.claude-3-5-sonnet-20240620-v1:0",  # Claude 3.5 v1 (Direct)
        "calls": random.randint(1, 5),
        "prompt": "ÏÑúÏö∏ ÍµêÌÜµ ÏÉÅÌô© Î∂ÑÏÑù",
    },
    # ===== Singapore Î¶¨Ï†Ñ (Cross-Region Inference Ìè¨Ìï®) =====
    {
        "type": "role",
        "name": "SingaporeAnalyticsApp-BedrockRole",
        "role_arn": f"arn:aws:iam::{ACCOUNT_ID}:role/SingaporeAnalyticsApp-BedrockRole",
        "region": "ap-southeast-1",
        "model": "anthropic.claude-3-haiku-20240307-v1:0",  # Claude 3 Haiku (Direct)
        "calls": random.randint(1, 5),
        "prompt": "Singapore market overview",
    },
    {
        "type": "role",
        "name": "SingaporeAnalyticsApp-BedrockRole",
        "role_arn": f"arn:aws:iam::{ACCOUNT_ID}:role/SingaporeAnalyticsApp-BedrockRole",
        "region": "ap-southeast-1",
        "model": "anthropic.claude-3-5-sonnet-20240620-v1:0",  # Claude 3.5 v1 (Direct)
        "calls": random.randint(1, 5),
        "prompt": "Southeast Asia business trends",
    },
]


def call_bedrock_with_role(scenario):
    """IAM RoleÏùÑ assumeÌïòÍ≥† Bedrock API Ìò∏Ï∂ú"""

    print(f"\nüîê Testing: {scenario['name']} (IAM Role)")
    print(f"   Role ARN: {scenario['role_arn']}")
    print(f"   Region: {scenario['region']}")
    print(f"   Model: {scenario['model']}")
    print(f"   Calls: {scenario['calls']}")

    try:
        # STSÎ°ú Role assume
        sts_client = boto3.client("sts", region_name="us-east-1")
        assumed_role = sts_client.assume_role(
            RoleArn=scenario["role_arn"],
            RoleSessionName=f"{scenario['name']}-test-session",
        )

        # Assumed role credentialsÎ°ú Bedrock ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÉùÏÑ±
        bedrock = boto3.client(
            "bedrock-runtime",
            region_name=scenario["region"],
            aws_access_key_id=assumed_role["Credentials"]["AccessKeyId"],
            aws_secret_access_key=assumed_role["Credentials"]["SecretAccessKey"],
            aws_session_token=assumed_role["Credentials"]["SessionToken"],
        )

        success_count = 0
        for i in range(scenario["calls"]):
            try:
                # Bedrock API Ìò∏Ï∂ú
                response = bedrock.invoke_model(
                    modelId=scenario["model"],
                    body=json.dumps(
                        {
                            "anthropic_version": "bedrock-2023-05-31",
                            "max_tokens": 200,
                            "messages": [
                                {"role": "user", "content": scenario["prompt"]}
                            ],
                        }
                    ),
                )

                success_count += 1
                print(f"   ‚úÖ Call {i+1}/{scenario['calls']} succeeded")

                # API rate limitÏùÑ Í≥†Î†§Ìïú ÏßßÏùÄ ÎåÄÍ∏∞
                time.sleep(0.5)

            except Exception as e:
                print(f"   ‚ùå Call {i+1}/{scenario['calls']} failed: {e}")

        print(f"   üìä Result: {success_count}/{scenario['calls']} calls succeeded")
        return success_count

    except Exception as e:
        print(f"   ‚ùå Error: {e}")
        return 0


def main():
    print("=" * 80)
    print("üß™ Bedrock Application Test Data Generator (Multi-Region, IAM Role-based)")
    print("=" * 80)
    print(f"\n‚è∞ Start Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üìù Total Scenarios: {len(TEST_SCENARIOS)}")

    # Î¶¨Ï†ÑÎ≥Ñ Î∂ÑÎ•ò
    region_stats = {}
    for scenario in TEST_SCENARIOS:
        region = scenario["region"]
        if region not in region_stats:
            region_stats[region] = 0
        region_stats[region] += 1

    print("\nüìä Scenarios by Region:")
    for region, count in region_stats.items():
        print(f"   ‚Ä¢ {region}: {count} IAM Roles")

    results = {
        "total_scenarios": len(TEST_SCENARIOS),
        "successful_scenarios": 0,
        "total_calls": sum(s["calls"] for s in TEST_SCENARIOS),
        "successful_calls": 0,
        "by_region": {},
    }

    # IAM Role Í∏∞Î∞ò ÌÖåÏä§Ìä∏
    print("\n" + "=" * 80)
    print("IAM Role-based Applications")
    print("=" * 80)

    for scenario in TEST_SCENARIOS:
        success_count = call_bedrock_with_role(scenario)
        if success_count > 0:
            results["successful_scenarios"] += 1
            results["successful_calls"] += success_count

            # Î¶¨Ï†ÑÎ≥Ñ ÌÜµÍ≥Ñ
            region = scenario["region"]
            if region not in results["by_region"]:
                results["by_region"][region] = {"calls": 0}
            results["by_region"][region]["calls"] += success_count

    # Í≤∞Í≥º ÏöîÏïΩ
    print("\n" + "=" * 80)
    print("üìä Test Summary")
    print("=" * 80)
    print(
        f"\n‚úÖ Successful Scenarios: {results['successful_scenarios']}/{results['total_scenarios']}"
    )
    print(
        f"‚úÖ Successful API Calls: {results['successful_calls']}/{results['total_calls']}"
    )

    print("\nüìä Results by Region:")
    for region, stats in results["by_region"].items():
        print(f"   ‚Ä¢ {region}: {stats['calls']} successful calls")

    print(f"\n‚è∞ End Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    print("\n" + "=" * 80)
    print("üí° Next Steps")
    print("=" * 80)
    print("\n1. Wait 2-3 minutes for Model Invocation Logging to be indexed")
    print("2. Run the tracker to verify application-level cost analysis:")
    print("   streamlit run bedrock_tracker.py")
    print("\n3. Or use CLI version:")
    print("   python bedrock_tracker_cli.py --region <region> --days 7")
    print("\n4. Check the analytics for each region:")
    for region in results["by_region"].keys():
        print(f"   - {region}")
    print("\n" + "=" * 80)


if __name__ == "__main__":
    main()
